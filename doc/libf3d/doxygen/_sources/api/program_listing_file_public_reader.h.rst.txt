
.. _program_listing_file_public_reader.h:

Program Listing for File reader.h
=================================

|exhale_lsh| :ref:`Return to documentation for file <file_public_reader.h>` (``public/reader.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef f3d_reader_h
   #define f3d_reader_h
   
   #include <vtkAlgorithm.h>
   #include <vtkImporter.h>
   #include <vtkSmartPointer.h>
   
   #include <algorithm>
   #include <cctype>
   #include <string>
   #include <vector>
   
   namespace f3d
   {
   class reader
   {
   public:
     reader() = default;
     virtual ~reader() = default;
   
     virtual const std::string getName() const = 0;
   
     virtual const std::string getShortDescription() const = 0;
   
     virtual const std::string getLongDescription() const { return this->getShortDescription(); }
   
     virtual const std::vector<std::string> getExtensions() const = 0;
   
     virtual const std::vector<std::string> getMimeTypes() const = 0;
   
     virtual bool canRead(const std::string& fileName) const
     {
       std::string ext = fileName.substr(fileName.find_last_of(".") + 1);
       std::transform(ext.begin(), ext.end(), ext.begin(), ::tolower);
   
       const std::vector<std::string> extensions = this->getExtensions();
       for (auto e : extensions)
       {
         if (e == ext)
         {
           return true;
         }
       }
       return false;
     }
   
     virtual int getScore() const { return 50; }
   
     virtual vtkSmartPointer<vtkAlgorithm> createGeometryReader(const std::string&) const
     {
       return nullptr;
     }
   
     virtual void applyCustomReader(vtkAlgorithm*, const std::string&) const {}
   
     virtual vtkSmartPointer<vtkImporter> createSceneReader(const std::string&) const
     {
       return nullptr;
     }
   
     virtual void applyCustomImporter(vtkImporter*, const std::string&) const {}
   };
   }
   
   #endif
